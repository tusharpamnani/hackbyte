// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  clerkId       String   @unique
  githubId      String?  @unique // Storing GitHub ID to avoid duplicates
  githubOwnerid String?  @unique // Storing GitHub Owner ID to avoid duplicates
  githubToken   String? // Storing GitHub token for user
  name          String
  lastName      String
  userName      String  @unique  
  email         String   @unique
  avatar        String? // GitHub profile picture URL
  courses       Course[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Course {
  id        String   @id @default(uuid())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  batch     Batch[]
  status    String   @default("not started") // e.g., "In Progress", "Completed", "Not Started"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Batch {
  id              String    @id @default(uuid())
  number          Int // Month number (1,2,3...)
  courseId        String
  course          Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  projects        Project[]
  githubProjectId String? // Stores GitHub project ID
  status          String    @default("not started") // e.g., "In Progress", "Completed", "Not Started"
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Project {
  id                 String   @id @default(uuid())
  title              String
  githubRepo         Json?    @db.JsonB // Store GitHub repo details as JSON name, id;
  description        String
  level              String // e.g., Beginner, Intermediate, Advanced
  status             String   @default("not started") // e.g., "In Progress", "Completed", "Not Started"
  batchId            String
  batch              Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)
  position           Int      @default(1) // Unique numbering for each project within a batch
  learningObjectives Json     @db.JsonB // Store nested objectives as JSON changes
  steps              Json?    @db.JsonB // Stores all the steps but it is optional
  GithubData         Json?    @db.JsonB // Store GitHub data
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([batchId, position]) // Ensures unique numbering within a batch
}
